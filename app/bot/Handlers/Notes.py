from aiogram.types import Message
from aiogram import Router, F

from tortoise.functions import Max

from ..Filters import Command #, IsAdminFilter
from ..DataBase.Models import Notes

rt = Router()


@rt.message(Command(
    commands=['+–∑–∞–º–µ—Ç–∫–∞'],
    html_parse_mode=True),
    F.chat.type != 'private',
)
async def add_chat_note_handler(message: Message, args=None) -> None | Message:
    #check_admin = IsAdminFilter(args[1])
    #if not await check_admin(message):
    #    return

    split = args[0].split('\n', 1)

    if len(split[0].split()) < 1 or len(split) < 2:
        return await message.answer(
            '‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n'
            '<code>+–∑–∞–º–µ—Ç–∫–∞ [–Ω–∞–∑–≤–∞–Ω–∏–µ]\n–¢–µ–∫—Å—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏</>'
        )

    note_name = ' '.join(split[0].split()[1:]).lower()
    note_text = ' '.join(split[1:])

    result = await Notes.filter(
        chat_id=message.chat.id,
        name=note_name
    ).first()

    if result:
        return await message.answer('üõë –ó–∞–º–µ—Ç–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')

    result = await Notes.filter(chat_id=message.chat.id).annotate(max_note=Max('number')).first()
    max_note_number = result.max_note or 0

    await Notes.create(
        chat_id=message.chat.id,
        name=note_name,
        text=note_text,
        number=max_note_number + 1
    )

    await message.answer(f'‚úÖ –ó–∞–º–µ—Ç–∫–∞ <b>{note_name} (#{max_note_number + 1})</> —Å–æ–∑–¥–∞–Ω–∞')


@rt.message(Command(
    commands=['-–∑–∞–º–µ—Ç–∫–∞'],
    html_parse_mode=True),
    F.chat.type != 'private'
)
async def remove_chat_note_handler(message: Message, args=None) -> None | Message:
    #check_admin = IsAdminFilter(args[1])
    #if not await check_admin(message):
    #    return

    split = args[0].split('\n', 1)

    if len(split[0].split()) < 1:
        return await message.answer(
            '‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n'
            '<code>-–∑–∞–º–µ—Ç–∫–∞ [–Ω–∞–∑–≤–∞–Ω–∏–µ]</>'
        )

    note_name = ' '.join(split[0].split()[1:]).lower()

    if note_name.isdigit():
        result = await Notes.filter(
            chat_id=message.chat.id,
            number=note_name
        ).first()
    else:
        result = await Notes.filter(
            chat_id=message.chat.id,
            name=note_name
        ).first()

    if not result:
        if note_name.isdigit():
            return await message.answer(f'‚ùé –ó–∞–º–µ—Ç–∫–∞ ‚Ññ<b>{note_name}</> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        else:
            return await message.answer(f'‚ùé –ó–∞–º–µ—Ç–∫–∞ <b>¬´{note_name}¬ª</> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')

    await result.delete()

    await message.answer(f'‚úÖ –ó–∞–º–µ—Ç–∫–∞ <b>{result.name}</> —É–¥–∞–ª–µ–Ω–∞')


@rt.message(Command(
    commands=['–∑–∞–º–µ—Ç–∫–∏']),
    F.chat.type != 'private'
)
async def get_notes_list_handler(message: Message, args=None) -> None | Message:
    #check_admin = IsAdminFilter(args[1])
    #if not await check_admin(message):
    #    return

    if len(args[0].split('\n', 1)[0].split()) > 1:
        return

    result = await Notes.filter(chat_id=message.chat.id).all()

    if not result:
        return await message.answer(
            '‚ùå –ó–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç—É\n\n'
            'üí¨ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –ø—Ä–æ–ø–∏—à–∏—Ç–µ:\n'
            '<code>+–∑–∞–º–µ—Ç–∫–∞ [–Ω–∞–∑–≤–∞–Ω–∏–µ]\n—Ç–µ–∫—Å—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏</>'
        )

    note_text = 'üìù <b>–ó–∞–º–µ—Ç–∫–∏ —á–∞—Ç–∞:</>\n'
    for note in result:
        note_text += f'#{note.number}. <code>{note.name}</>\n'

    await message.answer(note_text + '\n\nüí¨ –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–º–µ—Ç–∫—É –ø—Ä–æ–ø–∏—à–∏—Ç–µ: <code>!–∑–∞–º–µ—Ç–∫–∞ [–Ω–∞–∑–≤–∞–Ω–∏–µ | –Ω–æ–º–µ—Ä]</>')


@rt.message(Command(
    commands=['–∑–∞–º–µ—Ç–∫–∞']),
    F.chat.type != 'private'
)
async def get_note(message: Message, args=None) -> None | Message:
    #check_admin = IsAdminFilter(args[1])
    #if not await check_admin(message):
    #    return

    split = args[0].split('\n', 1)

    if len(split[0].split()) < 2:
        return await message.answer(
            '‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n'
            '<code>!–∑–∞–º–µ—Ç–∫–∞ [–Ω–∞–∑–≤–∞–Ω–∏–µ]</>'
        )

    note_name = ' '.join(split[0].split()[1:]).lower()

    if note_name.isdigit():
        result = await Notes.filter(
            chat_id=message.chat.id,
            number=note_name
        ).first()
    else:
        result = await Notes.filter(
            chat_id=message.chat.id,
            name=note_name
        ).first()

    if not result:
        if note_name.isdigit():
            return await message.answer(f'‚ùé –ó–∞–º–µ—Ç–∫–∞ ‚Ññ<b>{note_name}</> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        else:
            return await message.answer(f'‚ùé –ó–∞–º–µ—Ç–∫–∞ <b>¬´{note_name}¬ª</> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')

    await message.answer(f'üìù <b>–ó–∞–º–µ—Ç–∫–∞ ¬´{result.name}¬ª:</>\n {result.text}')


@rt.message(Command(
    commands=['~–∑–∞–º–µ—Ç–∫–∞']),
    F.chat.type != 'private'
)
async def edit_note_handler(message: Message, args=None) -> None | Message:
    #check_admin = IsAdminFilter(args[1])
    #if not await check_admin(message):
    #    return

    split = args[0].split('\n', 1)

    if len(split[0].split()) < 1 or len(split) < 2:
        return await message.answer(
            '‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n'
            '<code>~–∑–∞–º–µ—Ç–∫–∞ [–Ω–∞–∑–≤–∞–Ω–∏–µ]\n–¢–µ–∫—Å—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏</>'
        )

    note_name = ' '.join(split[0].split()[1:]).lower()
    note_text = ' '.join(split[1:])

    if note_name.isdigit():
        result = await Notes.filter(
            chat_id=message.chat.id,
            number=note_name
        ).first()
    else:
        result = await Notes.filter(
            chat_id=message.chat.id,
            name=note_name
        ).first()

    if not result:
        if note_name.isdigit():
            return await message.answer(f'‚ùé –ó–∞–º–µ—Ç–∫–∞ ‚Ññ<b>{note_name}</> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        else:
            return await message.answer(f'‚ùé –ó–∞–º–µ—Ç–∫–∞ <b>¬´{note_name}¬ª</> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')


    await Notes.update_or_create(
        defaults={'text': note_text},
        chat_id=message.chat.id,
        name=result.name
    )

    if note_name.isdigit():
        await message.answer(f'‚úÖ –ó–∞–º–µ—Ç–∫–∞ ‚Ññ<b>{note_name}</> –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
    else:
        await message.answer(f'‚úÖ –ó–∞–º–µ—Ç–∫–∞ <b>¬´{note_name}¬ª</> –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
