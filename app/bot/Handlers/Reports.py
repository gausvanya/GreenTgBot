from aiogram.types import Message
from aiogram import Router, F
from aiogram.types import CallbackQuery

from ..DataBase.Models import Admins, Report, ReportBinding
from ..Filters import GetUserInfo, Command #, IsAdminFilter
from ..KeyBoards import report_chat_keyboard, report_admin_keyboard
from ..utils import get_user_mention

rt = Router()


@rt.message(Command(
    commands=['—Ä–µ–ø–æ—Ä—Ç', 'report', '–∂–∞–ª–æ–±–∞'],
    html_parse_mode=True),
    F.chat.type != 'private',
)
async def report_user_handler(message: Message, args=None) -> None | Message:
    #check_admin = IsAdminFilter(args[1])
    #if not await check_admin(message):
    #    return

    split = args[0].split('\n', 1)[0]

    if len(split.split()) > 1:
        user = GetUserInfo(split.split(maxsplit=1)[1].rstrip())
        user = await user(message)

        if not user:
            return

        user_id, user_username, user_full_name = user

    elif message.reply_to_message:
        reply_user = message.reply_to_message.from_user
        user_id, user_username, user_full_name = reply_user.id, reply_user.username, reply_user.full_name
    else:
        return

    admin = message.from_user
    user_mention = get_user_mention(user_id, user_username, user_full_name)
    admin_mention = get_user_mention(admin.id, admin.username, admin.full_name)
    reason = args[0].split('\n', 1)[1] if len(args[0].split('\n', 1)) > 1 else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'

    admin_chat_id = await ReportBinding.filter(chat_id=message.chat.id).first()
    if not admin_chat_id:
        return await message.answer('‚ùå –ß–∞—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–¥–º–∏–Ω —á–∞—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±')

    admin_chat_id = admin_chat_id.admin_chat_id

    admins = await Admins.filter(chat_id=message.chat.id, user_id=user_id).first()

    if user_id == message.from_user.id:
        return await message.answer('—Ç—é—Ç—é?')

    if admins or message.bot.id == user_id:
        return await message.answer('üëë –ü—Ä–æ—Ç–∏–≤ –≤–ª–∞—Å—Ç–∏ –Ω–µ –ø–æ–ø—Ä–µ—à—å!')

    chat_message_id = await message.answer(
        f'‚úÖ <b>–ñ–∞–ª–æ–±–∞ –Ω–∞ {user_mention} (<code>@{user_id}</>) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</>\n'
        '‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å ‚ù§Ô∏è',
        reply_markup=report_chat_keyboard(  )
    )

    message_link = f"https://t.me/c/{str(message.chat.id)[4:]}/{chat_message_id.message_id}"

    admin_message_id = await message.bot.send_message(
        admin_chat_id,
        f'üìõ <b>–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∂–∞–ª–æ–±–∞</>\n\n'
        f'üë§ <b>–ñ–∞–ª–æ–±–∞ –Ω–∞:</> {user_mention} (<code>@{user_id}</>)\n'
        f'üë• <b>–ü–æ–∂–∞–ª–æ–≤–∞–ª—Å—è:</> {admin_mention} (<code>@{admin.id}</>)\n'
        f'üí¨ <b>–ü—Ä–∏—á–∏–Ω–∞:</> {reason}',
        reply_markup=report_admin_keyboard(message.chat.id, user_id, message_link)
    )

    await Report.create(
        chat_id=message.chat.id,
        user_id=user_id,
        admin_id=admin.id,
        reason=reason,
        chat_message_id=chat_message_id.message_id,
        admin_chat_id=admin_chat_id,
        admin_message_id=admin_message_id.message_id
    )


@rt.message(Command(
    commands=['–∏–¥—á–∞—Ç–∞', '—á–∞—Ç–∏–¥']),
    F.chat.type != 'private',
)
async def get_chat_id_handler(message: Message, args=None):
    if len(args[0].split('\n', 1)[0].split()) > 1:
        return

    await message.answer(f'üÜî —ç—Ç–æ–≥–æ —á–∞—Ç–∞: <code>{message.chat.id}</>')


@rt.message(Command(
    commands=['–ø—Ä–∏–≤—è–∑–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç—ã']),
    F.chat.type != 'private',
)
async def report_binding_handler(message: Message, args=None):
    split = args[0].split('\n', 1)[0].split()

    if len(split) > 3 and not split[2].isdigit():
        return

    chat_id = split[2]
    get_chat = await message.bot.get_chat(chat_id)

    if get_chat.username:
        chat_mention =  f'<a href="https://t.me/{get_chat.username}">{get_chat.full_name}</>'
    else:
        chat_mention =  f'<a href="https://t.me/c/{chat_id[4:]}">{get_chat.full_name}</>'

    await ReportBinding.update_or_create(
        defaults={'chat_id': int(chat_id)},
        admin_chat_id=message.chat.id
    )

    await message.answer(f'‚úÖ –ß–∞—Ç {chat_mention} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —ç—Ç–æ–º—É –ê–¥–º–∏–Ω-–ß–∞—Ç—É\n'
                         f'–¢–µ–ø–µ—Ä—å –≤—Å–µ –∂–∞–ª–æ–±—ã –∏–∑ –Ω–µ–≥–æ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞')


@rt.message(Command(
    commands=['–æ—Ç–≤—è–∑–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç—ã']),
    F.chat.type != 'private',
)
async def report_unbinding_handler(message: Message, args=None):
    split = args[0].split('\n', 1)[0].split()

    if len(split) > 3 and not split[2].isdigit():
        return

    chat_id = split[2]
    get_chat = await message.bot.get_chat(chat_id)

    if get_chat.username:
        chat_mention =  f'<a href="https://t.me/{get_chat.username}">{get_chat.full_name}</>'
    else:
        chat_mention =  f'<a href="https://t.me/c/{chat_id[4:]}">{get_chat.full_name}</>'

    result = await ReportBinding.filter(chat_id=int(chat_id), admin_chat_id=message.chat.id).first()
    if not result:
        return await message.answer(f'–ß–∞—Ç {chat_mention} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω')

    await result.delete()
    await message.answer(f'‚úÖ –ß–∞—Ç {chat_mention} –æ—Ç–≤—è–∑–∞–Ω –æ—Ç —ç—Ç–æ–≥–æ –ê–¥–º–∏–Ω-–ß–∞—Ç–∞\n'
                         f'–¢–µ–ø–µ—Ä—å –≤—Å–µ –∂–∞–ª–æ–±—ã –∏–∑ –Ω–µ–≥–æ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞')


@rt.callback_query(F.data == 'delete_report_chat')
async def delete_report_chat(call: CallbackQuery):
    result = await Report.filter(
        chat_id=call.message.chat.id,
        chat_message_id=call.message.message_id
    ).first()

    admins = await Admins.filter(chat_id=call.message.chat.id, user_id=call.from_user.id).first()

    if not admins:
        return await call.answer('üîê –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∂–∞–ª–æ–±—ã')

    if not result:
        return await call.answer('‚ùå –ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–º–æ–∂–Ω–æ –µ–µ —É–∂–µ —É–¥–∞–ª–∏–ª–∏')

    admin_chat_id = result.admin_chat_id
    admin_message_id = result.admin_message_id

    try:
        await call.message.delete()
        await call.bot.delete_message(admin_chat_id, admin_message_id)
    except Exception as e:
        await call.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}')

    await result.delete()


@rt.callback_query(F.data == 'delete_report_admin')
async def delete_report_admin_chat(call: CallbackQuery):
    result = await Report.filter(
        admin_chat_id=call.message.chat.id,
        admin_message_id=call.message.message_id
    ).first()

    admins = await Admins.filter(chat_id=call.message.chat.id, user_id=call.from_user.id).first()

    if not admins:
        return await call.answer('üîê –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∂–∞–ª–æ–±—ã')

    if not result:
        return await call.answer('‚ùå –ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–º–æ–∂–Ω–æ –µ–µ —É–∂–µ —É–¥–∞–ª–∏–ª–∏')

    chat_id = result.chat_id
    chat_message_id = result.chat_message_id

    try:
        await call.message.delete()
        await call.bot.delete_message(chat_id, chat_message_id)
    except Exception as e:
        await call.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}')

    await result.delete()


@rt.callback_query(F.data.startswith('ban_user_'))
async def report_ban_user(call: CallbackQuery):
    await call.answer('—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞')








