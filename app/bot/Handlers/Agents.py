from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message

from ..DataBase.Models import Agents, User
from ..Filters import GetUserInfo, Command
from ..lib.UserBot import get_user_status
from ..utils import get_user_mention

rt = Router()
agents = {5262910675, 5070279413, 5858412531}


@rt.message(Command(
    commands=['+–∞–≥–µ–Ω—Ç', '+—Å—Ç–∞–≥–µ–Ω—Ç', '+—Ç–µ—Ö–∞–≥–µ–Ω—Ç', '+–≥–ª–∞–≥–µ–Ω—Ç'],
    html_parse_mode=True),
    F.from_user.id.in_(agents)
)
async def add_agent_handler(message: Message, args=None):
    split = args[0].split('\n', 1)[0].lower()

    if len(split.split()) > 1:
        user = GetUserInfo(split.split(maxsplit=1)[1].rstrip())
        user = await user(message)

        if not user:
            return

        user_id, user_username, user_full_name = user

    elif message.reply_to_message:
        reply_user = message.reply_to_message.from_user
        user_id, user_username, user_full_name = reply_user.id, reply_user.username, reply_user.full_name
    else:
        return

    user_mention = get_user_mention(user_id, user_username, user_full_name)
    date = datetime.now().timestamp()

    if split.split()[0] == '+–∞–≥–µ–Ω—Ç':
        rang = '–∞–≥–µ–Ω—Ç–æ–º'
        default = {'admin_id': message.from_user.id, 'date': date}
    elif split.split()[0] == '+—Å—Ç–∞–≥–µ–Ω—Ç':
        rang = '—Å—Ç–∞—Ä—à–∏–º –∞–≥–µ–Ω—Ç–æ–º'
        default = {'st_agent': True, 'admin_id': message.from_user.id, 'date': date}
    elif split.split()[0] == '+–≥–ª–∞–≥–µ–Ω—Ç':
        rang = '–≥–ª–∞–≤–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º'
        default = {'gl_agent': True, 'admin_id': message.from_user.id, 'date': date}
    else:
        return

    await Agents.update_or_create(
        defaults=default,
        user_id=user_id
    )
    await message.answer(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} –Ω–∞–∑–Ω–∞—á–µ–Ω {rang}')


@rt.message(Command(
    commands=['-–∞–≥–µ–Ω—Ç', '-—Å—Ç–∞–≥–µ–Ω—Ç', '-—Ç–µ—Ö–∞–≥–µ–Ω—Ç', '-–≥–ª–∞–≥–µ–Ω—Ç'],
    html_parse_mode=True),
    F.from_user.id.in_(agents)
)
async def remove_agent_handler(message: Message, args=None):
    split = args[0].split('\n', 1)[0].lower()

    if len(split.split()) > 1:
        user = GetUserInfo(split.split(maxsplit=1)[1].rstrip())
        user = await user(message)

        if not user:
            return

        user_id, user_username, user_full_name = user

    elif message.reply_to_message:
        reply_user = message.reply_to_message.from_user
        user_id, user_username, user_full_name = reply_user.id, reply_user.username, reply_user.full_name
    else:
        return

    user_mention = get_user_mention(user_id, user_username, user_full_name)


    if split.split()[0] == '-—Å—Ç–∞–≥–µ–Ω—Ç':
        rang = '—Å—Ç–∞—Ä—à–∏–π –∞–≥–µ–Ω—Ç'
        default = {'st_agent': None, 'admin_id': message.from_user.id}
    elif split.split()[0] == '-–≥–ª–∞–≥–µ–Ω—Ç':
        rang = '–≥–ª–∞–≤–Ω—ã–π –∞–≥–µ–Ω—Ç'
        default = {'gl_agent': None, 'admin_id': message.from_user.id}
    else:
        default = None

        result = await Agents.filter(user_id=user_id).first()
        if not result:
            return await message.answer(f'{user_mention} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–≥–µ–Ω—Ç–æ–º')

        await message.answer(f'‚úÖ –ê–≥–µ–Ω—Ç {user_mention} —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω')
        await result.delete()

    if default:
        await Agents.update_or_create(
            defaults=default,
            user_id=user_id
        )
        await message.answer(f'‚úÖ {rang} {user_mention} —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω')


@rt.message(Command(
    commands=['–∞–≥–µ–Ω—Ç—ã', '–∫—Ç–æ –∞–≥–µ–Ω—Ç'],
    html_parse_mode=True),
    F.from_user.id.in_(agents)
)
async def agent_list_handler(message: Message):
    result = await Agents.all()
    text_agents = 'üî± <b>–°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞:</>\n'

    if not result:
        return await (message.answer(f"{text_agents + '–ü—É—Å—Ç'}"))


    for agent in result:
        if agent.gl_agent:
            rang = '–ì–ª.–ê–≥–µ–Ω—Ç'
        elif agent.st_agent:
            rang = '–°—Ç.–ê–≥–µ–Ω—Ç'
        else:
            rang = '–ê–≥–µ–Ω—Ç'

        user = await User.get_or_none(id=agent.user_id)

        get_status = await get_user_status(user.username if user.username else user.id)
        emoji_status = 'üéæ' if get_status == '–æ–Ω–ª–∞–π–Ω' else 'üèê'

        user_mention = get_user_mention(user.id, user.username, user.full_name)

        text_agents += f'{emoji_status} {rang} {user_mention}\n'

    await message.answer(text_agents)


@rt.message(Command(
    commands=['–∞–≥–µ–Ω—Ç –∏–Ω—Ñ–æ'],
    html_parse_mode=True),
    F.from_user.id.in_(agents)
)
async def remove_agent_handler(message: Message, args=None):
    split = args[0].split('\n', 1)[0].lower()

    if len(split.split()) > 1:
        user = GetUserInfo(split.split(maxsplit=2)[2].rstrip())
        user = await user(message)

        if not user:
            return

        user_id, user_username, user_full_name = user

    elif message.reply_to_message:
        reply_user = message.reply_to_message.from_user
        user_id, user_username, user_full_name = reply_user.id, reply_user.username, reply_user.full_name
    else:
        return

    user_mention = get_user_mention(user_id, user_username, user_full_name)
    result = await Agents.filter(user_id=user_id).first()

    if not result:
        return await message.answer(f'{user_mention} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–≥–µ–Ω—Ç–æ–º')

    admin = await User.filter(id=result.admin_id).first()

    admin_mention = get_user_mention(admin.id, admin.username, admin.full_name)


    if result.date:
        date = datetime.fromtimestamp(float(result.date))
        date = f'{date.day:02d}.{date.month:02d}.{date.year} {date.hour:02d}:{date.minute:02d}'
    else:
        date = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞'

    if result.gl_agent:
        rang = '–ì–ª.–ê–≥–µ–Ω—Ç'
        capability = (
            '‚ûï –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–Ω–µ—Å–µ–Ω–∏—è –≤ –∞–Ω—Ç–∏—Å–ø–∞–º / –∏–≥–Ω–æ—Ä –≤ –ª—é–±—ã—Ö —á–∞—Ç–∞—Ö\n'
            '‚ûï –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–Ω–µ—Å–µ–Ω–∏—è –∏–∑ –∞–Ω—Ç–∏—Å–ø–∞–º / –∏–≥–Ω–æ—Ä –≤ –ª—é–±—ã—Ö —á–∞—Ç–∞—Ö\n'
            '‚ûï –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–Ω–≥–∞ –≤ —á—É–∂–∏—Ö —á–∞—Ç–∞—Ö\n'
            '‚ûï –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è/—Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤\n'
        )
    elif result.st_agent:
        rang = '–°—Ç.–ê–≥–µ–Ω—Ç'
        capability = (
            '‚ûï –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–Ω–µ—Å–µ–Ω–∏—è –≤ –∞–Ω—Ç–∏—Å–ø–∞–º / –∏–≥–Ω–æ—Ä –≤ –ª—é–±—ã—Ö —á–∞—Ç–∞—Ö\n'
            '‚ûï –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–Ω–µ—Å–µ–Ω–∏—è –∏–∑ –∞–Ω—Ç–∏—Å–ø–∞–º / –∏–≥–Ω–æ—Ä –≤ –ª—é–±—ã—Ö —á–∞—Ç–∞—Ö\n'
            '‚ûï –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–Ω–≥–∞ –≤ —á—É–∂–∏—Ö —á–∞—Ç–∞—Ö\n'
        )
    else:
        rang = '–û–±—ã—á–Ω—ã–π –ê–≥–µ–Ω—Ç'
        capability = (
            '‚ûï –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–Ω–µ—Å–µ–Ω–∏—è –≤ –∞–Ω—Ç–∏—Å–ø–∞–º / –∏–≥–Ω–æ—Ä –≤ –∞–≥–µ–Ω—Ç-—á–∞—Ç–µ\n'
            '‚ûï –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–Ω–µ—Å–µ–Ω–∏—è –∏–∑ –∞–Ω—Ç–∏—Å–ø–∞–º / –∏–≥–Ω–æ—Ä –≤ –∞–≥–µ–Ω—Ç-—á–∞—Ç–µ\n'
        )

    await message.answer(
        f'üë§ —ç—Ç–æ –∞–≥–µ–Ω—Ç {user_mention}:\n\n'
        f'–†–∞–Ω–≥: {rang}\n'
        f'–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n{capability}\n\n'
        f'–ù–∞–∑–Ω–∞—á–∏–ª: {admin_mention}\n'
        f'–î–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {date}'
    )