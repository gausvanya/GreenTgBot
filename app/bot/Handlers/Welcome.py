from aiogram.filters import ChatMemberUpdatedFilter, JOIN_TRANSITION, LEAVE_TRANSITION
from aiogram.types import Message, ChatMemberUpdated
from aiogram import Router, F

from ..DataBase.Models import Welcome, User
from ..Filters import Command #, IsAdminFilter
from ..KeyBoards import add_bot_administration_keyboard
from ..utils import get_user_mention

rt = Router()


@rt.my_chat_member(ChatMemberUpdatedFilter(JOIN_TRANSITION))
async def add_bot_in_chat_handler(message: ChatMemberUpdated) -> None:
    await message.answer(
        f'<b>üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.chat.full_name}!</>\n‚ÑπÔ∏è'
        '–í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–Ω–µ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –∏–ª–∏ –ø–æ –≥–∞–π–¥—É:\n'
        '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ -> –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–∑–¥–µ–ª ¬´–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã¬ª -> –Ω–∞–∂–∏–º–∞–µ—Ç–µ ¬´–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞¬ª -> '
        '–∏—â–∏—Ç–µ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –±–æ—Ç–∞ -> –∫–ª–∏–∫–∞–µ—Ç–µ –Ω–∞ –Ω–µ–≥–æ -> –≤—ã–¥–∞—ë—Ç–µ <b>–í–°–ï</> –ø—Ä–∞–≤–∞ –∫—Ä–æ–º–µ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏.\n\n'
        'üìù <a href="https://teletype.in/@support_bot/suuportcommands">–ú–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</> \n'
        'üì£ <a href="https://t.me/chann_support">–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª</>',
        reply_markup=add_bot_administration_keyboard()
    )


@rt.chat_member(ChatMemberUpdatedFilter(JOIN_TRANSITION))
async def join_chat_member_handler(message: ChatMemberUpdated) -> None | Message:
    chat_id = message.chat.id
    user = message.new_chat_member.user
    admin = message.from_user
    user_id, user_username, user_full_name = user.id, (user.username.lower() if user.username else None), user.full_name
    admin_id, admin_username, admin_full_name = admin.id, admin.username, admin.full_name

    await User.update_or_create(
        defaults={
            'username': user_username,
            'full_name': user_full_name
        },
        id=user_id
    )

    user_mention = get_user_mention(user_id, user_username, user_full_name)
    admin_mention = get_user_mention(admin_id, admin_username, admin_full_name)

    if user_id != admin_id:
        await message.answer(f'üëã {user_mention} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É\n'
                             f'–î–æ–±–∞–≤–∏–ª: {admin_mention}')
    else:
        await message.answer(f'üëã {user_mention} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É')

    result = await Welcome.filter(
        chat_id=chat_id
    ).first()

    if not result:
        return

    welcome_text = result.text.replace('{–∏–º—è}', user_mention)
    photo_id = result.photo_id

    if photo_id:
        await message.answer_photo(photo=photo_id, caption=f'üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:</>\n{welcome_text}')
    else:
        await message.answer(f'üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:</>\n{welcome_text}')


@rt.chat_member(ChatMemberUpdatedFilter(LEAVE_TRANSITION))
async def leave_chat_member_handler(message: ChatMemberUpdated) -> None:
    user = message.old_chat_member.user
    admin = message.from_user
    user_mention = get_user_mention(user.id, user.username, user.full_name)
    admin_mention = get_user_mention(admin.id, admin.username, admin.full_name)

    if admin.id != user.id:
        await message.answer(f'üõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} –∏—Å–∫–ª—é—á–µ–Ω\n'
                             f'üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_mention}')
    else:
        await message.answer(f'üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç')


@rt.message(Command(
    commands=['+–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'],
    html_parse_mode=True),
    F.chat.type != 'private',
)
async def set_welcome_chat_handler(message: Message, args=None) -> None | Message:
    #check_admin = IsAdminFilter(args[1])
    #if not await check_admin(message):
    #    return

    split = args[0].split('\n', 1)

    if len(split[0].split()) > 1 or len(split) < 2:
        return await message.answer(
            '‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n'
            '<code>+–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n–¢–µ–∫—Å—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏</>'
        )

    welcome_text = split[1]
    photo_id = message.photo[-1].file_id if message.photo else None

    await Welcome.update_or_create(
        defaults={
            'text': welcome_text,
            'photo_id': photo_id
        },
        chat_id=message.chat.id
    )

    await message.answer('‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')


@rt.message(Command(
    commands=['-–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ']),
    F.chat.type != 'private',
)
async def remove_chat_welcome_handler(message: Message, args=None) -> None:
    #check_admin = IsAdminFilter(args[1])
    #if not await check_admin(message):
    #    return

    if len( args[0].split('\n', 1)[0].split()) > 1:
        return

    result = await Welcome.filter(chat_id=message.chat.id).first()

    if result:
        await result.delete()

    await message.answer('‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–¥–∞–ª–µ–Ω–æ')


@rt.message(Command(
    commands=['–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'],),
    F.chat.type != 'private',
)
async def get_chat_welcome_handler(message: Message, args=None) -> None | Message:
    #check_admin = IsAdminFilter(args[1])
    #if not await check_admin(message):
    #    return

    split = args[0].split('\n', 1)

    if len(split[0].split()) > 1:
        return

    result = await Welcome.filter(chat_id=message.chat.id).first()

    if not result:
        return await message.answer('üõë –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —á–∞—Ç–∞ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')

    welcome_text = result.text
    photo_id = result.photo_id

    if photo_id:
        await message.answer_photo(photo=photo_id, caption=f'üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:</>\n{welcome_text}')
    else:
        await message.answer(f'üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:</>\n{welcome_text}')
